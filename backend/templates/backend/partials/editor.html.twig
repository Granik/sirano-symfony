<script src="/lib/assets/tinymce/tinymce.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery-validation@1.19.1/dist/jquery.validate.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery-validation@1.19.1/dist/localization/messages_ru.js"></script>
<script>
    tinymce.init({
        selector: 'textarea.editor',
        language: 'ru',
        plugins: 'image media code link',
        toolbar: 'undo redo | copy cut paste pastetext | bold italic underline | alignleft aligncenter alignright alignjustify | styleselect | link image media | removeformat code',
        menubar: false,
        branding: false,
        /* enable title field in the Image dialog*/
        image_title: true,
        image_advtab: true,
        image_caption: true,
        style_formats: [
            {
                title: 'Изображение влево', selector: 'img', styles: {
                    'float': 'left',
                    'padding': '0 20px 0px 0'
                }
            },
        ],
        /* enable automatic uploads of images represented by blob or data URIs*/
        automatic_uploads: true,
        /*
          URL of our upload handler (for more details check: https://www.tiny.cloud/docs/configure/file-image-upload/#images_upload_url)
          images_upload_url: 'postAcceptor.php',
          here we add custom filepicker only to Image dialog
        */
        images_upload_url: '{{ path('cms_news_file_upload') }}',
        file_picker_types: 'image',
        /* and here's our custom image picker*/
        file_picker_callback: function (cb, value, meta) {
            var input = document.createElement('input');
            input.setAttribute('type', 'file');
            input.setAttribute('accept', 'image/*');

            /*
              Note: In modern browsers input[type="file"] is functional without
              even adding it to the DOM, but that might not be the case in some older
              or quirky browsers like IE, so you might want to add it to the DOM
              just in case, and visually hide it. And do not forget do remove it
              once you do not need it anymore.
            */

            input.onchange = function () {
                var file = this.files[0];

                var reader = new FileReader();
                reader.onload = function () {
                    /*
                      Note: Now we need to register the blob in TinyMCEs image blob
                      registry. In the next release this part hopefully won't be
                      necessary, as we are looking to handle it internally.
                    */
                    var id = 'blobid' + (new Date()).getTime();
                    var blobCache = tinymce.activeEditor.editorUpload.blobCache;
                    var base64 = reader.result.split(',')[1];
                    var blobInfo = blobCache.create(id, file, base64);
                    blobCache.add(blobInfo);

                    /* call the callback and populate the Title field with the file name */
                    cb(blobInfo.blobUri(), {title: file.name});
                };
                reader.readAsDataURL(file);
            };

            input.click();
        },
        init_instance_callback: function (editor) {
            editor.on('Change', function (e) {
                $('#' + editor.id).text(editor.getContent());
            });
        }
    });

    $(function() {
        var validator = $('form').submit(function() {
            // update underlying textarea before submit validation
            tinyMCE.triggerSave();
        }).validate({
            ignore: '',
            rules: {
                title: 'required',
                content: 'required'
            },
            errorPlacement: function(label, element) {
                // position error label after generated textarea
                if (element.is('textarea')) {
                    label.insertAfter(element.next());
                } else {
                    label.insertAfter(element)
                }
            }
        });

        validator.focusInvalid = function() {
            // put focus on tinymce on submit validation
            if (this.settings.focusInvalid) {
                try {
                    var toFocus = $(this.findLastActive() || this.errorList.length && this.errorList[0].element || []);
                    if (toFocus.is('textarea')) {
                        tinyMCE.get(toFocus.attr('id')).focus();
                    } else {
                        toFocus.filter(':visible').focus();
                    }
                } catch (e) {
                    // ignore IE throwing errors when focusing hidden elements
                }
            }
        }
    })
</script>